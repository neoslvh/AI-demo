document.addEventListener("DOMContentLoaded", function () {
    const sendButton = document.getElementById("send-btn");
    const inputField = document.getElementById("input");
    const chatBox = document.getElementById("chat-box");
    const fileInput = document.getElementById("file-input");
    const filePreview = document.getElementById("file-preview");
  
    // Bi·∫øn l∆∞u tr·ªØ file ƒë∆∞·ª£c t·∫£i l√™n
    let uploadedFile = null;
  
    // H·ªó tr·ª£ nh·∫•n Enter ƒë·ªÉ g·ª≠i v√† Shift+Enter ƒë·ªÉ xu·ªëng d√≤ng
    inputField.addEventListener("keydown", function (event) {
      if (event.key === "Enter") {
        if (event.shiftKey) {
          event.preventDefault();
          inputField.value += "\n";
        } else {
          event.preventDefault();
          sendButton.click();
        }
      }
    });
  
    // S·ª± ki·ªán khi ch·ªçn file: l∆∞u file v√† hi·ªÉn th·ªã preview
    fileInput.addEventListener("change", function (event) {
      const file = event.target.files[0];
      if (file) {
        uploadedFile = file;
        // Hi·ªÉn th·ªã file preview v·ªõi t√™n file v√† n√∫t x√≥a
        filePreview.innerHTML = `<span>ƒê√£ ch·ªçn file: ${file.name}</span> <button id="remove-file-btn">X√≥a</button>`;
        filePreview.style.display = "flex";
        // X·ª≠ l√Ω n√∫t x√≥a
        document.getElementById("remove-file-btn").addEventListener("click", function () {
          uploadedFile = null;
          filePreview.innerHTML = "";
          filePreview.style.display = "none";
          inputField.placeholder = "Nh·∫≠p tin nh·∫Øn...";
        });
        // C·∫≠p nh·∫≠t placeholder ƒë·ªÉ y√™u c·∫ßu nh·∫≠p ch√∫ th√≠ch (n·∫øu c·∫ßn)
        inputField.placeholder = ``;
      }
      fileInput.value = ""; // Reset file input
    });
  
    // S·ª± ki·ªán khi nh·∫•n n√∫t g·ª≠i
    sendButton.addEventListener("click", async function () {
      // N·∫øu c√≥ file ƒë∆∞·ª£c t·∫£i l√™n, ∆∞u ti√™n g·ª≠i file k√®m ch√∫ th√≠ch
      if (uploadedFile) {
        const annotation = inputField.value.trim(); // Ch√∫ th√≠ch nh·∫≠p v√†o
        // Hi·ªÉn th·ªã tin nh·∫Øn file v·ªõi ch√∫ th√≠ch (n·∫øu c√≥)
        let displayText = `<div class="file-info"><strong>File:</strong> ${uploadedFile.name}</div>`;
        displayText += annotation
          ? `<div class="file-annotation"><em></em> ${annotation}</div>`
          : `<div class="file-annotation"><em></em></div>`;
        appendMessage("user-file", displayText);
        
        // ƒê·ªçc n·ªôi dung file v√† g·ª≠i cho AI
        const fileContent = await readFileContent(uploadedFile);
        
        // Reset file preview v√† placeholder
        uploadedFile = null;
        filePreview.innerHTML = "";
        filePreview.style.display = "none";
        inputField.value = "";
        inputField.placeholder = "Nh·∫≠p tin nh·∫Øn...";
        
        sendMessageToAI(fileContent);
      } else {
        // N·∫øu kh√¥ng c√≥ file, g·ª≠i n·ªôi dung vƒÉn b·∫£n nh·∫≠p v√†o
        const userText = inputField.value.trim();
        if (!userText) return;
        appendMessage("user", `üë§ B·∫°n: ${userText}`);
        inputField.value = "";
        sendMessageToAI(userText);
      }
    });
  
    // H√†m ƒë·ªçc n·ªôi dung file tr·∫£ v·ªÅ Promise
    function readFileContent(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function (e) {
          resolve(e.target.result);
        };
        reader.onerror = function (e) {
          reject(e);
        };
        reader.readAsText(file);
      });
    }
  
    // H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn API
    async function sendMessageToAI(text) {
      const loadingMsg = appendMessage("ai", "ü§ñ AI ƒëang tr·∫£ l·ªùi...");
      try {
        const response = await fetch("/chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ message: text })
        });
        const data = await response.json();
        removeMessage(loadingMsg);
        if (data.response) {
          const formattedText = formatText(data.response);
          appendMessage("ai", `ü§ñ AI: ${formattedText}`);
        } else {
          appendMessage("error", "‚ö†Ô∏è L·ªói: AI kh√¥ng c√≥ ph·∫£n h·ªìi.");
        }
      } catch (error) {
        removeMessage(loadingMsg);
        console.error("Error:", error);
        appendMessage("error", "‚ö†Ô∏è L·ªói k·∫øt n·ªëi API. Vui l√≤ng th·ª≠ l·∫°i.");
      }
      chatBox.scrollTop = chatBox.scrollHeight;
    }
  
    // H√†m hi·ªÉn th·ªã tin nh·∫Øn
    function appendMessage(type, text) {
      const msgDiv = document.createElement("div");
      if (type === "user") {
        msgDiv.className = "user-msg";
      } else if (type === "user-file") {
        msgDiv.className = "user-file-msg";
      } else if (type === "ai") {
        msgDiv.className = "ai-msg";
      } else if (type === "error") {
        msgDiv.className = "error-msg";
      }
      msgDiv.innerHTML = text;
      chatBox.appendChild(msgDiv);
      chatBox.scrollTop = chatBox.scrollHeight;
      return msgDiv;
    }
  
    // H√†m x√≥a tin nh·∫Øn (d√πng cho loading)
    function removeMessage(element) {
      if (chatBox.contains(element)) {
        chatBox.removeChild(element);
      }
    }
  
    // H√†m ƒë·ªãnh d·∫°ng vƒÉn b·∫£n: lo·∫°i b·ªè d·∫•u ** v√† chuy·ªÉn \n th√†nh <br>
    function formatText(text) {
      return text.replace(/\*\*(.*?)\*\*/g, "$1").replace(/\n/g, "<br>");
    }
  });
  